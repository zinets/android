package info.hamster.widgets;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.Service;
import android.content.*;
import android.database.ContentObserver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import info.hamster.widgets.providers.BatteryLevelProvider;
import info.hamster.widgets.providers.MissedCallsProvider;
import info.hamster.widgets.providers.MissedSmsProvider;

/**
 * Created by IntelliJ IDEA.
 * User: Zinetz Victor
 * Date: 11.02.11
 */
public class WidgetService extends Service {

    private MissedCallsProvider callsEventsObserver = null;
    private MissedSmsProvider smsEventsObserver = null;
    private BatteryLevelProvider batteryObserver = null;


    private Uri calendarUri;
    final Uri gmailUri = Uri.parse("content://gmail-ls/labels/");

    private TimeEventsReceiver timeEventsReceiver = null;

//    private CalendarEventsObserver calendarObserver = null;
//    private GMailObserver[] gmailObserver = null;

    public static boolean ServiceStarted = false;


    public static int alertsCount = -1;
    public static int unreadedMail = -1;

    private class GMailObserver extends ContentObserver {

        private Uri uri;

        public void registerSelf(String account) {

            uri = Uri.withAppendedPath(gmailUri, account);
            getGMailCount();

            final ContentResolver cr = getApplicationContext().getContentResolver();
            cr.registerContentObserver(uri, true, this);
        }

        public void unregisterSelf() {
            final ContentResolver cr = getApplicationContext().getContentResolver();
            cr.unregisterContentObserver(this);
        }

        public GMailObserver() {
            super(null);
        }

        protected void getGMailCount() {
            Cursor cursor = getContentResolver().query(
                    uri,
                    new String[]{"canonicalName", "numUnreadConversations"},
                    null, null, null);

            if (cursor != null) {
                cursor.moveToFirst();

                unreadedMail = 0;
                while (cursor.moveToNext()) {
                    String name = cursor.getString(0);
                    if (name.equals("^i")) {
                        unreadedMail += cursor.getInt(1);
                        break;
                    }
                }
            }
        }

        @Override
        public void onChange(boolean selfChange) {

            final int t = unreadedMail;
            getGMailCount();
            if (t != unreadedMail)
                getApplicationContext().sendBroadcast(new Intent("info.hamster.widgets.time_to_update"));

        }
    }

    private class CalendarEventsObserver extends ContentObserver {

        public CalendarEventsObserver() {
            super(null);

            if (Build.VERSION.SDK_INT == 7) // android 2.1
                calendarUri = Uri.parse("content://calendar/calendar_alerts");
            else if (Build.VERSION.SDK_INT > 7) //android 2.2
                calendarUri = Uri.parse("content://com.android.calendar/calendar_alerts");

            getAlertCount();
        }

        protected void getAlertCount() {
            final Cursor c = getContentResolver().
                    query(calendarUri, null, "state = ? or state = ?", new String[]{"0", "1"}, null);
            if (c != null)
                alertsCount = c.getCount();
            else
                alertsCount = 0;
        }

        @Override
        public void onChange(boolean selfChange) {
            final int t = alertsCount;
            getAlertCount();
            if (t != alertsCount)
                getApplicationContext().sendBroadcast(new Intent("info.hamster.widgets.time_to_update"));
        }
    }


    private class TimeEventsReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {

            Config.Log("TIME_TICK incoming broadcast..");

            if (Config.TESTING) {
            }
            context.sendBroadcast(new Intent("info.hamster.widgets.time_to_update"));

            Config.Log("widgets updated.");
        }
    }


    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {

        final Context context = getApplicationContext();
        final ContentResolver cr = context.getContentResolver();

        if (callsEventsObserver == null) {
            callsEventsObserver = new MissedCallsProvider(context);
            cr.registerContentObserver(Config.MissedCallsUri, true, callsEventsObserver);
        }

        if (smsEventsObserver == null) {
            smsEventsObserver = new MissedSmsProvider(context);
            cr.registerContentObserver(Config.MissedSmsUri, true, smsEventsObserver);
            cr.registerContentObserver(Config.MissedMmsSmsUri, true, smsEventsObserver);
        }

        if (timeEventsReceiver == null) {
            timeEventsReceiver = new TimeEventsReceiver();
            registerReceiver(timeEventsReceiver, new IntentFilter(Intent.ACTION_TIME_TICK));
            registerReceiver(timeEventsReceiver, new IntentFilter(Intent.ACTION_TIME_CHANGED));
            registerReceiver(timeEventsReceiver, new IntentFilter(Intent.ACTION_TIMEZONE_CHANGED));
            registerReceiver(timeEventsReceiver, new IntentFilter(Intent.ACTION_DATE_CHANGED));
        }

        if (Config.TESTING) {
//            if (calendarObserver == null)
//                calendarObserver = new CalendarEventsObserver();
//            cr.registerContentObserver(calendarUri, true, calendarObserver);
//
//            if (gmailObserver == null) {
//
//                AccountManager mgr = AccountManager.get(getApplicationContext());
//                Account[] accounts = mgr.getAccountsByType("com.google");
//                gmailObserver = new GMailObserver[accounts.length];
//                int idx = 0;
//                for (Account ac : accounts) {
//                    gmailObserver[idx] = new GMailObserver();
//                    gmailObserver[idx].registerSelf(ac.name);
//                }
//            }
//
            if (batteryObserver == null) {
                batteryObserver = new BatteryLevelProvider();
                registerReceiver(batteryObserver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
                registerReceiver(batteryObserver, new IntentFilter(Intent.ACTION_BATTERY_LOW));
                registerReceiver(batteryObserver, new IntentFilter(Intent.ACTION_BATTERY_OKAY));
                registerReceiver(batteryObserver, new IntentFilter(Intent.ACTION_POWER_CONNECTED));
                registerReceiver(batteryObserver, new IntentFilter(Intent.ACTION_POWER_DISCONNECTED));
            }
        }

        ServiceStarted = true;

        return START_STICKY;
    }

    @Override
    public void onDestroy() {

        final ContentResolver cr = getApplicationContext().getContentResolver();

        if (callsEventsObserver != null) {
            cr.unregisterContentObserver(callsEventsObserver);
            callsEventsObserver = null;
        }

        if (smsEventsObserver != null) {
            cr.unregisterContentObserver(smsEventsObserver);
            smsEventsObserver = null;
        }

        if (timeEventsReceiver != null) {
            unregisterReceiver(timeEventsReceiver);
            timeEventsReceiver = null;
        }

        if (Config.TESTING) {
//            cr.unregisterContentObserver(calendarObserver);
//            calendarObserver = null;
//
//            for (GMailObserver o : gmailObserver) {
//                o.unregisterSelf();
//            }
//            gmailObserver = null;
//
            if (batteryObserver != null) {
                unregisterReceiver(batteryObserver);
                batteryObserver = null;
            }
        }

        Config.Log("Broadcaster unregistered, service stopping");

        ServiceStarted = false;
        super.onDestroy();
    }
}
